name: Production

on:
  push:
    branches:
      - main
  workflow_run:
    workflows: ["Test Pipline"]
    types: [completed]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag-ul imaginii (ex: SHORT_SHA din CI; dacă lipsește, folosește head_sha)"
        required: false
        type: string

env:
  APP_PORT: 8081        
  NGINX_PORT: 8080
  MONGODB_DB_NAME: db1
  MONGODB_CONNECTION_PROTOCOL: mongodb+srv

jobs:
  deploy:
    name: SSH deploy (pull & run)
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'main')
    environment: production

    steps:
      - name: Decide TAG (SHORT_SHA sau input)
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
            TAG="${SHA::7}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Using image tag: $TAG"

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRODUCTION }}

      - name: Test SSH connection
        run: ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.IP_PRODUCTION }} "echo ✅ Connected to $(hostname)"

      - name: Deploy over SSH (docker pull & run)
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          IMAGE_TAG: ${{ steps.tag.outputs.tag }}
          MONGODB_CONNECTION_PROTOCOL: ${{ env.MONGODB_CONNECTION_PROTOCOL }}
          MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          MONGODB_CLUSTER_ADDRESS: ${{ secrets.MONGODB_CLUSTER_ADDRESS }}
          MONGODB_DB_NAME: ${{ env.MONGODB_DB_NAME }}
          APP_PORT: ${{ env.APP_PORT }}
          NGINX_PORT: ${{ env.NGINX_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.IP_PRODUCTION }} \
            "DOCKER_USERNAME='${DOCKER_USERNAME}' \
             DOCKER_TOKEN='${DOCKER_TOKEN}' \
             IMAGE_TAG='${IMAGE_TAG}' \
             MONGODB_CONNECTION_PROTOCOL='${MONGODB_CONNECTION_PROTOCOL}' \
             MONGODB_USERNAME='${MONGODB_USERNAME}' \
             MONGODB_PASSWORD='${MONGODB_PASSWORD}' \
             MONGODB_CLUSTER_ADDRESS='${MONGODB_CLUSTER_ADDRESS}' \
             MONGODB_DB_NAME='${MONGODB_DB_NAME}' \
             APP_PORT='${APP_PORT}' \
             NGINX_PORT='${NGINX_PORT}' \
             bash -s" <<'EOF'
          set -euo pipefail

          echo "== docker login =="
          echo "${DOCKER_TOKEN}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

          echo "== create network =="
          docker network create appnet || true

          echo "== pull images ${IMAGE_TAG} =="
          docker pull ${DOCKER_USERNAME}/myapp:${IMAGE_TAG}
          docker pull ${DOCKER_USERNAME}/mynginx:${IMAGE_TAG}

          echo "== stop old containers =="
          docker rm -f app || true
          docker rm -f nginx || true

          echo "== sanity check Mongo env =="
          for v in MONGODB_CONNECTION_PROTOCOL MONGODB_USERNAME MONGODB_PASSWORD MONGODB_CLUSTER_ADDRESS MONGODB_DB_NAME; do
            if [ -z "${!v:-}" ]; then echo "❌ Missing $v"; exit 1; else echo "✅ $v set"; fi
          done

          echo "== start app (internal:${APP_PORT}) =="
          docker run -d --name app --restart=always --network appnet \
            -e MONGODB_CONNECTION_PROTOCOL="${MONGODB_CONNECTION_PROTOCOL}" \
            -e MONGODB_USERNAME="${MONGODB_USERNAME}" \
            -e MONGODB_PASSWORD="${MONGODB_PASSWORD}" \
            -e MONGODB_CLUSTER_ADDRESS="${MONGODB_CLUSTER_ADDRESS}" \
            -e MONGODB_DB_NAME="${MONGODB_DB_NAME}" \
            -e PORT="${APP_PORT}" \
            ${DOCKER_USERNAME}/myapp:${IMAGE_TAG}
            # 👆 Fără -p: app NU e expus public, doar în rețeaua Docker

          echo "== start nginx (:80 -> app:${APP_PORT}) =="
          docker run -d --name nginx --restart=always --network appnet \
            -p ${NGINX_PORT}:80 \
            ${DOCKER_USERNAME}/mynginx:${IMAGE_TAG}
          EOF
