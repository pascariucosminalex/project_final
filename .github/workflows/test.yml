name: CI Pipeline

on:
  push:
    branches: [ "main", "dev" ]

env:
  MONGODB_DB_NAME: gha-demo
  PORT: 8080

jobs:
  test:
    name: Run Tests with MongoDB
    runs-on: ubuntu-latest
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      MONGODB_CLUSTER_ADDRESS: ${{ secrets.MONGODB_CLUSTER_ADDRESS }}
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
    outputs:
      short_sha: ${{ steps.sha.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-deps-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Start server
        run: |
          npm start &
          npx wait-on http://127.0.0.1:$PORT

      - name: Install Playwright dependencies
        run: npx playwright install

      - name: Run Playwright tests
        run: npm test

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/

      - name: Compute SHORT_SHA
        id: sha
        run: echo "short_sha=${GITHUB_SHA::6}" >> "$GITHUB_OUTPUT"

  build-image:
    name: Build Docker Image (local)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Construim imaginea LOCAL cu tag bazat pe SHA scurt
      - name: Build image for scanning (local daemon)
        run: |
          docker build -f docker/Dockerfile.app \
            -t myapp:${{ needs.test.outputs.short_sha }} .

  trivy-scan:
    name: Scan Image with Trivy
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      # Scanăm imaginea locală construită în jobul anterior
      - name: Trivy scan (local image)
        uses: aquasecurity/trivy-action@0.33.0
        with:
          image-ref: myapp:${{ needs.test.outputs.short_sha }}
          format: table
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '0'            # pune '1' dacă vrei să pice pipeline-ul la vulnerabilități
          output: trivy-report.txt

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Rebuild (sau retag + push) imaginile cu namespace-ul tău
      - name: Build App Image (namespace)
        run: |
          docker build -f docker/Dockerfile.app \
            -t ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.test.outputs.short_sha }} .

      - name: Build Nginx Image (namespace)
        run: |
          docker build -f docker/Dockerfile.nginx \
            -t ${{ secrets.DOCKER_USERNAME }}/mynginx:${{ needs.test.outputs.short_sha }} .

      - name: Push Images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.test.outputs.short_sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/mynginx:${{ needs.test.outputs.short_sha }}

  approve-deploy:
    name: Approve Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    environment: production
    steps:
      - name: Await manual approval
        run: echo "✅ CI complete. Waiting for manual approval to deploy to production..."
