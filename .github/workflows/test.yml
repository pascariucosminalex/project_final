name: Test Pipline

on:
  push:
    branches: [ "main", "dev" ]

env:
  MONGODB_DB_NAME: db1
  PORT: 8080

jobs:
  test:
    name: Run Tests with MongoDB
    runs-on: ubuntu-latest
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      MONGODB_CLUSTER_ADDRESS: ${{ secrets.MONGODB_CLUSTER_ADDRESS }}
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
    outputs:
      short_sha: ${{ steps.sha.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-deps-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Start server
        run: |
          npm start &
          npx wait-on http://127.0.0.1:$PORT

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Run Playwright tests
        run: npm test

      - name: Ensure coverage dir exists
        run: mkdir -p coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/
          if-no-files-found: ignore

      - name: Compute SHORT_SHA
        id: sha
        run: echo "short_sha=${GITHUB_SHA::6}" >> "$GITHUB_OUTPUT"

  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build App Image
        run: |
          docker build -f docker/Dockerfile.app \
            -t ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.test.outputs.short_sha }} .

      - name: Build Nginx Image
        run: |
          docker build -f docker/Dockerfile.nginx \
            -t ${{ secrets.DOCKER_USERNAME }}/mynginx:${{ needs.test.outputs.short_sha }} docker

      - name: Push Images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.test.outputs.short_sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/mynginx:${{ needs.test.outputs.short_sha }}

  trivy-scan:
    name: Scan Images with Trivy (from Docker Hub)
    runs-on: ubuntu-latest
    needs: [docker, test]
    steps:
      - name: Login to Docker Hub (for private images)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Trivy scan (app)
        uses: aquasecurity/trivy-action@0.33.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.test.outputs.short_sha }}
          format: table
          output: trivy-app.txt
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '0'

      - name: Trivy scan (nginx)
        uses: aquasecurity/trivy-action@0.33.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/mynginx:${{ needs.test.outputs.short_sha }}
          format: table
          output: trivy-nginx.txt
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '0'

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-app.txt
            trivy-nginx.txt

  ssh-smoketest:
    name: Test SSH Deploy to Production VM
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRODUCTION }}

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.IP_PRODUCTION }} \
            "echo ✅ Connected to $(hostname) && docker ps -a || true"

  docker-smoketest:
    name: Run Docker Smoke Test (local check)
    runs-on: ubuntu-latest
    needs: [docker, test]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}


      - name: Set TAG
        run: |
          TAG="${{ needs.test.outputs.short_sha }}"
          if [ -z "$TAG" ]; then
          echo "ℹ️ needs.test.outputs.short_sha e gol; fallback la GITHUB_SHA"
          TAG="${GITHUB_SHA:0:6}"
          fi
          echo "Using TAG: $TAG"
          echo "TAG=$TAG" >> "$GITHUB_ENV"

      - name: Pull images
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${IMAGE_TAG}
          docker pull ${{ secrets.DOCKER_USERNAME }}/mynginx:${IMAGE_TAG}

      - name: Start containers
        env:
          # var env ale app-ului pentru smoke
          MONGODB_CONNECTION_PROTOCOL: mongodb+srv
          MONGODB_CLUSTER_ADDRESS: ${{ secrets.MONGODB_CLUSTER_ADDRESS }}
          MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        run: |
          docker network create appnet || true

          docker run -d --name app --network appnet \
            -e MONGODB_CONNECTION_PROTOCOL="${MONGODB_CONNECTION_PROTOCOL}" \
            -e MONGODB_USERNAME="${MONGODB_USERNAME}" \
            -e MONGODB_PASSWORD="${MONGODB_PASSWORD}" \
            -e MONGODB_CLUSTER_ADDRESS="${MONGODB_CLUSTER_ADDRESS}" \
            -e MONGODB_DB_NAME='${{ env.MONGODB_DB_NAME }}' \
            -e PORT='${{ env.PORT }}' \
            -p 8080:8080 \
            ${{ secrets.DOCKER_USERNAME }}/myapp:${IMAGE_TAG}

          docker run -d --name nginx --network appnet \
            -p 8081:80 \
            ${{ secrets.DOCKER_USERNAME }}/mynginx:${IMAGE_TAG}

      - name: Wait 60s and check status
        run: |
          echo "⏳ Aștept 60s să pornească aplicațiile..."
          sleep 60
          echo "== docker ps =="
          docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'

          bad=$(docker ps --format '{{.Names}} {{.Status}}' | grep -i "Restarting" || true)
          if [ -n "$bad" ]; then
            echo "❌ Un container e în restart:"
            echo "$bad"
            exit 1
          else
            echo "✅ Toate containerele rulează OK"
          fi

      - name: Cleanup
        if: always()
        run: |
          docker rm -f app nginx || true
          docker network rm appnet || true

  report:
    name: CI Summary & Failures
    runs-on: ubuntu-latest
    needs: [test, docker, trivy-scan, ssh-smoketest, docker-smoketest]
    if: always()
    steps:
      - name: Build failure report
        uses: actions/github-script@v7
        with:
          script: |
            const run_id = context.runId;
            const { data } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id,
              per_page: 100,
            });

            const jobs = (data.jobs || []).map(j => ({
              name: j.name,
              conclusion: j.conclusion,
              status: j.status,
              html_url: j.html_url,
              steps: (j.steps || []).filter(s => s.conclusion === 'failure')
                     .map(s => `#${s.number}: ${s.name}`)
            }));

            let md = `## CI Summary (run ${run_id})\n\n`;
            for (const j of jobs) {
              md += `- **${j.name}** → **${j.conclusion ?? j.status}** [logs](${j.html_url})\n`;
              for (const s of j.steps) md += `  - ❌ Step ${s}\n`;
            }

            const failed = jobs.filter(j => ['failure','cancelled','timed_out'].includes(j.conclusion));
            md += `\n${failed.length ? '### ❗ Rezultat\n' + failed.length + ' job(uri) au eșuat.' : '### ✅ Rezultat\nToate joburile au trecut.'}`;

            await core.summary.addRaw(md).write();
            if (failed.length) core.setFailed(`${failed.length} job(s) failed`);

  approve-deploy:
    name: Approve Deploy to Production
    runs-on: ubuntu-latest
    needs: ssh-smoketest
    environment: production
    steps:
      - name: Await manual approval
        run: echo "✅ CI complete. Waiting for manual approval to deploy to production..."
